(prog (compilation_unit (namespace_member_declaration (class_declaration class (identifier CSharp70) (class_body { (class_member_declaration (method_declaration method_modifiers (return_type void) (method_header (member_name (identifier PatternMatching)) ( (parameter_list (fixed_parameters (fixed_parameter (type (class_type string)) (identifier arg)) , (fixed_parameter (type (integral_type int)) (identifier b)))) )) (method_body (block { (statement_list (statement (switch_statement switch ( (expression (identifier arg)) ) (switch_block { (switch_section (switch_label case (pattern (literal "A")) (case_guard when (expression (relational_expression (relational_expression (identifier b)) > (shift_expression (literal 50))))) :) (switch_label case (pattern (literal "B")) (case_guard when (expression (relational_expression (relational_expression (identifier b)) < (shift_expression (literal 50))))) :) (switch_label default :) (statement_list (break_statement break ;))) }))) (statement (expression_statement (statement_expression (assignment (unary_expression (tuple_expression ( (tuple_element (declaration_expression (local_variable_type (namespace_or_type_name (identifier A) (type_argument_list < (type_arguments (type_argument (identifier B)) , (type_argument (identifier C))) >))) (identifier D))) , (tuple_element (declaration_expression (local_variable_type (namespace_or_type_name (identifier E) (type_argument_list < (type_arguments (type_argument (identifier F)) , (type_argument (identifier G))) >))) (identifier H))) ))) (assignment_operator =) (expression (identifier e)))) ;)) (statement (if_statement if ( (boolean_expression (relational_expression (relational_expression (null_conditional_member_access (primary_expression (null_conditional_member_access (primary_expression (identifier x)) ? . (identifier y))) ? . (identifier z))) is (pattern (declaration_pattern (type (identifier Type)) (simple_designation (identifier value2)))))) ) (embedded_statement (block { })))) (statement (if_statement if ( (boolean_expression (relational_expression (relational_expression (identifier expr)) is (pattern (declaration_pattern (type (identifier Type)) (simple_designation (identifier v)))))) ) (embedded_statement (block { (statement_list (expression_statement (statement_expression (invocation_expression (primary_expression (identifier Hello)) ( ))) ;)) }))))) })))) (class_member_declaration (method_declaration (method_modifiers (method_modifier (ref_method_modifier public)) (method_modifier (ref_method_modifier static)) (method_modifier async)) (return_type (identifier Task)) (method_header (member_name (identifier LocalFunctions)) ( (parameter_list (fixed_parameter (type (array_type (non_array_type (class_type string)) (rank_specifier [ ]))) (identifier args))) )) (method_body (block { (statement_list (statement (local_function_declaration (return_type (class_type string)) (local_function_header (identifier Hello2) ( (parameter_list (fixed_parameter (type (integral_type int)) (identifier i))) )) (local_function_body (block { (statement_list (return_statement return (expression (element_access (primary_no_array_creation_expression (identifier args)) [ (argument_list (identifier i)) ])) ;)) })))) (statement (local_function_declaration (local_function_modifier async) (return_type (namespace_or_type_name (identifier Task) (type_argument_list < (type_arguments (class_type string)) >))) (local_function_header (identifier Hello) (type_parameter_list < (type_parameters (identifier T)) >) ( (parameter_list (fixed_parameter (type (identifier T)) (identifier i))) )) (local_function_body => (expression (await_expression await (unary_expression (invocation_expression (primary_expression (member_access (primary_expression (identifier Task)) . (identifier FromResult))) ( (argument_list (element_access (primary_no_array_creation_expression (identifier args)) [ (argument_list (identifier i)) ])) ))))) ;))) (statement (expression_statement (statement_expression (await_expression await (unary_expression (invocation_expression (primary_expression (identifier Hello)) ( (argument_list (literal 1)) ))))) ;))) })))) (class_member_declaration (method_declaration (method_modifiers (method_modifier (ref_method_modifier public)) (method_modifier (ref_method_modifier static))) (return_type void) (method_header (member_name (identifier OutVar)) ( (parameter_list (fixed_parameter (type (array_type (non_array_type (class_type string)) (rank_specifier [ ]))) (identifier args))) )) (method_body (block { (statement_list (statement (expression_statement (statement_expression (invocation_expression (primary_expression (member_access (predefined_type int) . (identifier TryParse))) ( (argument_list (argument (invocation_expression (primary_expression (identifier Hello)) ( (argument_list (literal 1)) ))) , (argument (argument_value out (variable_reference (declaration_expression (local_variable_type (contextual_keyword var)) (identifier item)))))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (member_access (predefined_type int) . (identifier TryParse))) ( (argument_list (argument (invocation_expression (primary_expression (identifier Hello)) ( (argument_list (literal 1)) ))) , (argument (argument_value out (variable_reference (declaration_expression (local_variable_type (integral_type int)) (identifier item)))))) ))) ;))) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier ThrowExpression)) ( )) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier result) = (expression (null_coalescing_expression (conditional_or_expression (identifier nullableResult)) ?? (null_coalescing_expression (throw_expression throw (null_coalescing_expression (object_creation_expression new (type (identifier NullReferenceException)) ( )))))))))) ;)) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier BinaryLiterals)) ( )) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier nineteen) = (local_variable_initializer (literal 0b10011)))))) ;)) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier DigitSeparators)) ( )) (method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier bin) = (local_variable_initializer (literal 0b1001_1010_0001_0100)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier hex) = (local_variable_initializer (literal 0x1b_a0_44_fe)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier dec) = (local_variable_initializer (literal 33_554_432)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier weird) = (local_variable_initializer (literal 1_2__3___4____5_____6______7_______8________9)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (floating_point_type double)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier real) = (local_variable_initializer (literal 1_000.111_1e-1_000)))))) ;))) })))) }))) (namespace_member_declaration (class_declaration class (identifier CSharp71) (class_body { (class_member_declaration (method_declaration method_modifiers (return_type void) (method_header (member_name (identifier DefaultWithoutTypeName)) ( (parameter_list (fixed_parameter (type (class_type string)) (identifier content) (default_argument = (expression (default_literal default))))) )) (method_body (block { (statement_list (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DefaultWithoutTypeName)) ( (argument_list (default_literal default)) ))) ;)) })))) (class_member_declaration (method_declaration method_modifiers (return_type void) (method_header (member_name (identifier TupleRecognize)) ( (parameter_list (fixed_parameters (fixed_parameter (type (integral_type int)) (identifier a)) , (fixed_parameter (type (tuple_type ( (tuple_type_element (integral_type int)) , (tuple_type_element (integral_type int)) ))) (identifier b)) , (fixed_parameter (type (nullable_value_type (non_nullable_value_type (tuple_type ( (tuple_type_element (integral_type int)) , (tuple_type_element (integral_type int)) , (tuple_type_element (integral_type int)) ))) (nullable_type_annotation ?))) (identifier c)))) )) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier result) = (expression (invocation_expression (primary_expression (member_access (primary_expression (invocation_expression (primary_expression (member_access (primary_expression (identifier list)) . (identifier Select))) ( (argument_list (lambda_expression (anonymous_function_signature (identifier c)) => (anonymous_function_body (tuple_expression ( (tuple_element (member_access (primary_expression (identifier c)) . (identifier f1))) , (tuple_element (identifier f3) : (expression (member_access (primary_expression (identifier c)) . (identifier f2)))) ))))) ))) . (identifier Where))) ( (argument_list (lambda_expression (anonymous_function_signature (identifier t)) => (anonymous_function_body (equality_expression (equality_expression (member_access (primary_expression (identifier t)) . (identifier f2))) == (relational_expression (literal 1)))))) )))))) ;)) })))) }))) (namespace_member_declaration (class_declaration class (identifier CSharp72) (class_body { (class_member_declaration (struct_declaration (struct_modifier readonly) struct (identifier ReadonlyRef1) (struct_body { (struct_member_declaration (field_declaration (type (namespace_or_type_name (identifier Func) (type_argument_list < (type_arguments (type_argument (integral_type int)) , (type_argument (integral_type int))) >))) (variable_declarators (variable_declarator (identifier s) = (variable_initializer (lambda_expression (anonymous_function_signature (explicit_anonymous_function_signature ( (explicit_anonymous_function_parameter_list (explicit_anonymous_function_parameter (anonymous_function_parameter_modifier in) (type (integral_type int)) (identifier x))) ))) => (anonymous_function_body (identifier x)))))) ;)) (struct_member_declaration (indexer_declaration (ref_kind ref) (indexer_declarator (type (identifier TValue)) this [ (parameter_list (fixed_parameter (parameter_modifier (parameter_mode_modifier in)) (type (identifier TKey)) (identifier index))) ]) (ref_indexer_body => ref (variable_reference (null_literal null)) ;))) (struct_member_declaration (operator_declaration (operator_modifier public) (operator_modifier static) (operator_declarator (binary_operator_declarator (type (identifier Vector3)) operator (overloadable_binary_operator +) ( (fixed_parameter (parameter_modifier (parameter_mode_modifier in)) (type (identifier Vector3)) (identifier x)) , (fixed_parameter (parameter_modifier (parameter_mode_modifier in)) (type (identifier Vector3)) (identifier y)) ))) (operator_body => (expression (null_literal null)) ;))) (struct_member_declaration (method_declaration (ref_method_modifiers (ref_method_modifier static)) (ref_kind ref readonly) (ref_return_type (identifier Vector3)) (method_header (member_name (identifier M1_Trace)) ( )) (ref_method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration (ref_kind ref readonly) var (ref_local_variable_declarator (identifier r1) = ref (variable_reference (invocation_expression (primary_expression (identifier M1)) ( )))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_ref_local_variable_declaration (ref_kind ref readonly) (type (identifier Vector3)) (ref_local_variable_declarators (ref_local_variable_declarator (identifier r2) = ref (variable_reference (explictly_typed_default default ( (type (identifier Vector3)) ))))))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier Mutate)) ( (argument_list (argument_value ref (variable_reference (identifier r1)))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier Print)) ( (argument_list (argument_value in (variable_reference (identifier r1)))) ))) ;)) (statement (return_statement return ref (variable_reference (identifier r1)) ;))) })))) }))) (class_member_declaration (struct_declaration ref struct (identifier ReadonlyRef2) (struct_body { (struct_member_declaration (method_declaration ref_method_modifiers (ref_kind ref readonly) (ref_return_type (identifier Guid)) (method_header (member_name (identifier Test)) ( (parameter_list (fixed_parameters (fixed_parameter (parameter_modifier (parameter_mode_modifier in)) (type (identifier Vector3)) (identifier v1)) , (fixed_parameter (parameter_modifier (parameter_mode_modifier in)) (type (identifier Vector3)) (identifier v2)))) )) (ref_method_body (block { (statement_list (statement (expression_statement (statement_expression (assignment (unary_expression (identifier v1)) (assignment_operator =) (expression (explictly_typed_default default ( (type (identifier Vector3)) ))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (member_access (primary_expression (identifier v1)) . (identifier X))) (assignment_operator =) (expression (literal 0)))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier foo)) ( (argument_list (argument_value ref (variable_reference (member_access (primary_expression (identifier v1)) . (identifier X))))) ))) ;)) (statement (return_statement return ref (variable_reference (parenthesized_expression ( (expression (conditional_expression (null_coalescing_expression (equality_expression (equality_expression (identifier arr)) != (relational_expression (null_literal null)))) ? ref (variable_reference (element_access (primary_no_array_creation_expression (identifier arr)) [ (argument_list (literal 0)) ])) : ref (variable_reference (element_access (primary_no_array_creation_expression (identifier otherArr)) [ (argument_list (literal 0)) ])))) ))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (namespace_or_type_name (identifier Span) (type_argument_list < (type_arguments (integral_type int)) >))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier span) = (local_variable_initializer (stackalloc_expression stackalloc (unmanaged_type (integral_type int)) [ (expression (literal 1)) ])))))) ;)) (statement (return_statement return (expression (object_creation_expression new (type (identifier Vector3)) ( (argument_list (argument (additive_expression (additive_expression (member_access (primary_expression (identifier v1)) . (identifier X))) + (multiplicative_expression (member_access (primary_expression (identifier v2)) . (identifier X))))) , (argument (additive_expression (additive_expression (member_access (primary_expression (identifier v1)) . (identifier Y))) + (multiplicative_expression (member_access (primary_expression (identifier v2)) . (identifier Y))))) , (argument (additive_expression (additive_expression (member_access (primary_expression (identifier v1)) . (identifier Z))) + (multiplicative_expression (member_access (primary_expression (identifier v2)) . (identifier Z)))))) ))) ;))) })))) (struct_member_declaration (method_declaration ref_method_modifiers (ref_kind ref) (ref_return_type (identifier T)) (method_header (member_name (identifier Choice)) ( (parameter_list (fixed_parameters (fixed_parameter (type (simple_type bool)) (identifier condition)) , (fixed_parameter (parameter_modifier (parameter_mode_modifier ref)) (type (identifier T)) (identifier consequence)) , (fixed_parameter (parameter_modifier (parameter_mode_modifier ref)) (type (identifier T)) (identifier alternative)))) )) (ref_method_body (block { (statement_list (if_statement if ( (boolean_expression (identifier condition)) ) (embedded_statement (block { (statement_list (return_statement return ref (variable_reference (identifier consequence)) ;)) })) else (embedded_statement (block { (statement_list (return_statement return ref (variable_reference (identifier alternative)) ;)) })))) })))) }))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier DoSomething)) ( (parameter_list (fixed_parameters (fixed_parameter (type (simple_type bool)) (identifier isEmployed)) , (fixed_parameter (type (class_type string)) (identifier personName)) , (fixed_parameter (type (integral_type int)) (identifier personAge)))) )) (method_body (block { })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier NonTrailingNamedArguments)) ( )) (method_body (block { (statement_list (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DoSomething)) ( (argument_list (argument (argument_name (identifier isEmployed) :) (argument_value (boolean_literal true))) , (argument (identifier name)) , (argument (identifier age))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DoSomething)) ( (argument_list (argument (boolean_literal true)) , (argument (argument_name (identifier personName) :) (argument_value (identifier name))) , (argument (identifier age))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DoSomething)) ( (argument_list (argument (identifier name)) , (argument (argument_name (identifier isEmployed) :) (argument_value (boolean_literal true))) , (argument (identifier age))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DoSomething)) ( (argument_list (argument (identifier name)) , (argument (identifier age)) , (argument (argument_name (identifier isEmployed) :) (argument_value (boolean_literal true)))) ))) ;)) (statement (expression_statement (statement_expression (invocation_expression (primary_expression (identifier DoSomething)) ( (argument_list (argument (boolean_literal true)) , (argument (argument_name (identifier personAge) :) (argument_value (identifier age))) , (argument (argument_name (identifier personName) :) (argument_value (identifier name)))) ))) ;))) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier ConditionalRef)) ( )) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration (ref_kind ref) var (ref_local_variable_declarator (identifier r) = ref (variable_reference (parenthesized_expression ( (expression (conditional_expression (null_coalescing_expression (equality_expression (equality_expression (identifier arr)) != (relational_expression (null_literal null)))) ? ref (variable_reference (element_access (primary_no_array_creation_expression (identifier arr)) [ (argument_list (literal 0)) ])) : ref (variable_reference (element_access (primary_no_array_creation_expression (identifier otherArr)) [ (argument_list (literal 0)) ])))) )))))) ;)) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier LeadingSeparator)) ( )) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier res) = (expression (additive_expression (additive_expression (additive_expression (additive_expression (additive_expression (additive_expression (additive_expression (additive_expression (literal 0)) + (multiplicative_expression (literal 123))) + (multiplicative_expression (literal 1_2_3))) + (multiplicative_expression (literal 0x1_2_3))) + (multiplicative_expression (literal 0b101))) + (multiplicative_expression (literal 0b1_0_1))) + (multiplicative_expression (literal 0x_1_2))) + (multiplicative_expression (literal 0b_1_0_1))))))) ;)) })))) }))) (namespace_member_declaration (class_declaration class (identifier CSharp73) (class_body { (class_member_declaration (method_declaration method_modifiers (return_type void) (method_header (member_name (identifier Blittable)) (type_parameter_list < (type_parameters (identifier T)) >) ( (parameter_list (fixed_parameter (type (identifier T)) (identifier (contextual_keyword value)))) ) (type_parameter_constraints_clause where (type_parameter (identifier T)) : (type_parameter_constraints (contextual_keyword unmanaged)))) (method_body (block { (statement_list (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier (contextual_keyword unmanaged)) = (expression (literal 666))))) ;)) })))) (class_member_declaration (struct_declaration (struct_modifier (unsafe_modifier unsafe)) struct (identifier IndexingMovableFixed) (struct_body { (struct_member_declaration (fixed_size_buffer_declaration (fixed_size_buffer_modifier public) fixed (buffer_element_type (integral_type int)) (fixed_size_buffer_declarators (fixed_size_buffer_declarator (identifier myFixedField) [ (constant_expression (literal 10)) ])) ;)) }))) (class_member_declaration (field_declaration (field_modifier static) (type (identifier IndexingMovableFixed)) (variable_declarators (identifier s)) ;)) (class_member_declaration (method_declaration (method_modifiers (method_modifier (ref_method_modifier public)) (method_modifier (unsafe_modifier unsafe))) (return_type void) (method_header (member_name (identifier IndexingMovableFixedFields)) ( )) (method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (pointer_type (value_type (integral_type int)) *)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier ptr) = (local_variable_initializer (member_access (primary_expression (identifier s)) . (identifier myFixedField))))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier t) = (local_variable_initializer (element_access (primary_no_array_creation_expression (member_access (primary_expression (identifier s)) . (identifier myFixedField))) [ (argument_list (literal 5)) ])))))) ;))) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier PatternBasedFixed)) ( )) (method_body (block { (statement_list (fixed_statement fixed ( (pointer_type (value_type (integral_type byte)) *) (fixed_pointer_declarators (fixed_pointer_declarator (identifier ptr) = (fixed_pointer_initializer (identifier byteArray)))) ) (embedded_statement (block { })))) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier StackallocArrayInitializer)) ( )) (method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (namespace_or_type_name (identifier Span) (type_argument_list < (type_arguments (integral_type int)) >))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier a) = (local_variable_initializer (stackalloc_expression stackalloc (unmanaged_type (integral_type int)) [ (expression (literal 3)) ])))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (namespace_or_type_name (identifier Span) (type_argument_list < (type_arguments (integral_type int)) >))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier a) = (local_variable_initializer (stackalloc_expression stackalloc (unmanaged_type (integral_type int)) [ (constant_expression (literal 3)) ] (stackalloc_initializer { (stackalloc_initializer_element_list (stackalloc_element_initializer (literal 1)) , (stackalloc_element_initializer (literal 2)) , (stackalloc_element_initializer (literal 3))) }))))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (namespace_or_type_name (identifier Span) (type_argument_list < (type_arguments (integral_type int)) >))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier a) = (local_variable_initializer (stackalloc_expression stackalloc (unmanaged_type (integral_type int)) [ ] (stackalloc_initializer { (stackalloc_initializer_element_list (stackalloc_element_initializer (literal 1)) , (stackalloc_element_initializer (literal 2)) , (stackalloc_element_initializer (literal 3))) }))))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (namespace_or_type_name (identifier Span) (type_argument_list < (type_arguments (integral_type int)) >))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier a) = (local_variable_initializer (stackalloc_expression stackalloc [ ] (stackalloc_initializer { (stackalloc_initializer_element_list (stackalloc_element_initializer (literal 1)) , (stackalloc_element_initializer (literal 2)) , (stackalloc_element_initializer (literal 3))) }))))))) ;))) })))) (class_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier TupleEquality)) ( )) (method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (tuple_type ( (tuple_type_element (integral_type int)) , (tuple_type_element (tuple_type ( (tuple_type_element (integral_type int)) , (tuple_type_element (integral_type int)) ))) ))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier t1)) , (explicitly_typed_local_variable_declarator (identifier t2))))) ;)) (statement (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier res) = (expression (equality_expression (equality_expression (identifier t1)) == (relational_expression (tuple_expression ( (tuple_element (literal 1)) , (tuple_element (tuple_expression ( (tuple_element (literal 2)) , (tuple_element (literal 3)) ))) )))))))) ;))) })))) })))))
