(prog (compilation_unit (namespace_declaration namespace (qualified_identifier (identifier Comments) . (identifier XmlComments) . (identifier UndocumentedKeywords)) (namespace_body { (namespace_member_declaration (class_declaration class (identifier (contextual_keyword yield)) (class_body { (class_member_declaration (method_declaration (method_modifiers (method_modifier (ref_method_modifier public)) partial) (return_type void) (method_header (member_name (identifier method)) ( )) (method_body (block { (statement_list (statement (expression_statement (statement_expression (assignment (unary_expression (identifier b)) (assignment_operator =) (expression (unary_expression (logical_negation_operator !) (unary_expression (identifier b)))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator =) (expression (unary_expression ~ (unary_expression (identifier i)))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier b)) (assignment_operator =) (expression (conditional_and_expression (conditional_and_expression (relational_expression (relational_expression (identifier i)) < (shift_expression (identifier i)))) && (inclusive_or_expression (relational_expression (relational_expression (identifier i)) > (shift_expression (identifier i)))))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (nullable_value_type (non_nullable_value_type (integral_type int)) (nullable_type_annotation ?))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier ii) = (local_variable_initializer (literal 5)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (integral_type int)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier f) = (local_variable_initializer (conditional_expression (null_coalescing_expression (boolean_literal true)) ? (expression (literal 1)) : (expression (literal 0)))))))) ;)) (statement (expression_statement (statement_expression (post_increment_expression (primary_expression (identifier i)) ++)) ;)) (statement (expression_statement (statement_expression (post_decrement_expression (primary_expression (identifier i)) --)) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier b)) (assignment_operator =) (expression (conditional_or_expression (conditional_or_expression (conditional_and_expression (conditional_and_expression (boolean_literal true)) && (inclusive_or_expression (boolean_literal false)))) || (conditional_and_expression (boolean_literal true)))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier b)) (assignment_operator =) (expression (conditional_and_expression (conditional_and_expression (conditional_and_expression (conditional_and_expression (equality_expression (equality_expression (identifier i)) == (relational_expression (identifier i)))) && (inclusive_or_expression (equality_expression (equality_expression (identifier i)) != (relational_expression (identifier i))))) && (inclusive_or_expression (relational_expression (relational_expression (identifier i)) <= (shift_expression (identifier i))))) && (inclusive_or_expression (relational_expression (relational_expression (identifier i)) >= (shift_expression (identifier i)))))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator +=) (expression (literal 5.0)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator -=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator *=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator /=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator %=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator &=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator |=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator ^=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator <<=) (expression (identifier i)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (identifier i)) (assignment_operator (right_shift_assignment > >=)) (expression (identifier i)))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (class_type object)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier s) = (local_variable_initializer (lambda_expression (anonymous_function_signature (identifier x)) => (anonymous_function_body (additive_expression (additive_expression (identifier x)) + (multiplicative_expression (literal 1)))))))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (floating_point_type double)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier d) = (local_variable_initializer (literal .3)))))) ;)) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (identifier Point)) (explicitly_typed_local_variable_declarators (identifier point)))) ;)) (statement (unsafe_statement unsafe (block { (statement_list (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (pointer_type (value_type (identifier Point)) *)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier p) = (local_variable_initializer (addressof_expression & (unary_expression (identifier point)))))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (pointer_member_access (primary_expression (identifier p)) -> (identifier x))) (assignment_operator =) (expression (literal 10)))) ;))) }))) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (qualified_alias_member (identifier IO) :: (identifier BinaryReader))) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier br) = (local_variable_initializer (null_literal null)))))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (element_access (primary_no_array_creation_expression (identifier x)) [ (argument_list (argument (argument_name (identifier i) :) (argument_value (literal 1)))) ])) (assignment_operator =) (expression (literal 3)))) ;)) (statement (expression_statement (statement_expression (assignment (unary_expression (element_access (primary_no_array_creation_expression (identifier x)) [ (argument_list (argument (argument_name (identifier i) :) (argument_value (literal 1))) , (argument (argument_name (identifier j) :) (argument_value (literal 5)))) ])) (assignment_operator =) (expression (literal "str")))) ;))) })))) (class_member_declaration (struct_declaration struct (identifier Point) (struct_body { (struct_member_declaration (field_declaration (field_modifier public) (type (integral_type int)) (variable_declarators (identifier X)) ;)) (struct_member_declaration (field_declaration (field_modifier public) (type (integral_type int)) (variable_declarators (identifier Y)) ;)) (struct_member_declaration (method_declaration (method_modifiers (ref_method_modifier public)) (return_type void) (method_header (member_name (identifier ThisAccess)) ( )) (method_body (block { (statement_list (expression_statement (statement_expression (assignment (unary_expression (this_access this)) (assignment_operator =) (expression (this_access this)))) ;)) })))) }))) }))) }))))
