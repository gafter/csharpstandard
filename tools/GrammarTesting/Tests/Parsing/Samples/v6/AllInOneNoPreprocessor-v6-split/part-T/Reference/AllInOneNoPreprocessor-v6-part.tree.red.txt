(prog (compilation_unit (namespace_declaration namespace (qualified_identifier (identifier Comments) . (identifier XmlComments) . (identifier UndocumentedKeywords)) (namespace_body { (namespace_member_declaration (class_declaration class (identifier CSharp6Features) (class_body { (class_member_declaration (method_declaration (method_modifiers (method_modifier async)) (return_type void) (method_header (member_name (identifier Test)) ( )) (method_body (block { (statement_list (statement (declaration_statement (local_variable_declaration (implicitly_typed_local_variable_declaration var (implicitly_typed_local_variable_declarator (identifier numbers) = (expression (object_creation_expression new (type (namespace_or_type_name (identifier Dictionary) (type_argument_list < (type_arguments (type_argument (integral_type int)) , (type_argument (class_type string))) >))) (object_or_collection_initializer (object_initializer { (member_initializer_list (member_initializer (initializer_target [ (argument_list (literal 7)) ]) = (initializer_value (literal "seven"))) , (member_initializer (initializer_target [ (argument_list (literal 9)) ]) = (initializer_value (literal "nine"))) , (member_initializer (initializer_target [ (argument_list (literal 13)) ]) = (initializer_value (literal "thirteen")))) }))))))) ;)) (statement (try_statement try (block { }) (catch_clauses (specific_catch_clause catch (exception_specifier ( (type (identifier MyException)) (identifier e) )) (exception_filter when ( (boolean_expression (invocation_expression (primary_expression (identifier myfilter)) ( (argument_list (identifier e)) ))) )) (block { }))))) (statement (declaration_statement (local_variable_declaration (explicitly_typed_local_variable_declaration (type (identifier Resource)) (explicitly_typed_local_variable_declarators (explicitly_typed_local_variable_declarator (identifier res) = (local_variable_initializer (null_literal null)))))) ;)) (statement (try_statement try (block { (statement_list (expression_statement (statement_expression (assignment (unary_expression (identifier res)) (assignment_operator =) (expression (await_expression await (unary_expression (invocation_expression (primary_expression (member_access (primary_expression (identifier Resource)) . (identifier OpenAsync))) ( ))))))) ;)) }) (catch_clauses (specific_catch_clause catch (exception_specifier ( (type (identifier ResourceException)) (identifier e) )) (block { (statement_list (expression_statement (statement_expression (await_expression await (unary_expression (invocation_expression (primary_expression (member_access (primary_expression (identifier Resource)) . (identifier LogAsync))) ( (argument_list (argument (identifier res)) , (argument (identifier e))) ))))) ;)) }))) (finally_clause finally (block { (statement_list (if_statement if ( (boolean_expression (equality_expression (equality_expression (identifier res)) != (relational_expression (null_literal null)))) ) (embedded_statement (expression_statement (statement_expression (await_expression await (unary_expression (invocation_expression (primary_expression (member_access (primary_expression (identifier res)) . (identifier CloseAsync))) ( ))))) ;)))) }))))) })))) }))) }))))
